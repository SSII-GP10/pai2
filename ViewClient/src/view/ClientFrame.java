package view;

import business.ClientConfig;
import connections.ClientConnection;
import helpers.ReaderPlus;
import helpers.Utilities;
import helpers.WriterPlus;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.swing.JOptionPane;

public class ClientFrame extends javax.swing.JFrame {

    private ClientConfig clientConfig;

    public ClientFrame() {
        initComponents();
        clientConfig = ClientConfig.getInstance();
        readConfig();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        conteinerPanel = new javax.swing.JPanel();
        destinationLabel = new javax.swing.JLabel();
        accountField = new javax.swing.JTextField();
        amountLabel = new javax.swing.JLabel();
        amountField = new javax.swing.JTextField();
        transferButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Transfer");
        setResizable(false);
        getContentPane().setLayout(null);

        destinationLabel.setText("Destination account:");

        amountLabel.setText("Amount:");

        transferButton.setText("Transfer");
        transferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout conteinerPanelLayout = new javax.swing.GroupLayout(conteinerPanel);
        conteinerPanel.setLayout(conteinerPanelLayout);
        conteinerPanelLayout.setHorizontalGroup(
            conteinerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conteinerPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(conteinerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(conteinerPanelLayout.createSequentialGroup()
                        .addGroup(conteinerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(destinationLabel)
                            .addComponent(amountLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(conteinerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accountField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(transferButton))
                .addContainerGap(152, Short.MAX_VALUE))
        );
        conteinerPanelLayout.setVerticalGroup(
            conteinerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, conteinerPanelLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(conteinerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destinationLabel)
                    .addComponent(accountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(conteinerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountLabel)
                    .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(transferButton)
                .addContainerGap())
        );

        getContentPane().add(conteinerPanel);
        conteinerPanel.setBounds(0, 0, 470, 130);

        setSize(new java.awt.Dimension(454, 156));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void transferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferButtonActionPerformed
        try {
            String accountOrigin = clientConfig.getNumberAccount();
            String accountDestinate = this.accountField.getText();
            float amount = Float.parseFloat(this.amountField.getText());
            String clientKey = clientConfig.getKey();
            String algorithm = clientConfig.getAlgorithm();
            String message = accountOrigin + "," + accountDestinate + "," + amount;
            String mac = Utilities.calculateMac(message, clientKey, algorithm);
            transfer(message, mac);
        } catch (NumberFormatException | NullPointerException | UnsupportedEncodingException
                | NoSuchAlgorithmException | InvalidKeyException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_transferButtonActionPerformed

    private void transfer(String message, String mac) {
        try {
            ClientConnection connection = new ClientConnection(clientConfig.getIpServer(), clientConfig.getPortServer());
            connection.openConnection();
            transferButton.setEnabled(false);
            OutputStream outStream = connection.getOutputStream();
            OutputStreamWriter outStreamWriter = new OutputStreamWriter(outStream);
            WriterPlus writer = new WriterPlus(outStreamWriter, 3000);
            writer.writeLine(message);
            writer.writeLine(mac);
            writer.flush();
            InputStream inStream = connection.getInputStream();
            InputStreamReader inStreamReader = new InputStreamReader(inStream);
            ReaderPlus reader = new ReaderPlus(inStreamReader, 3000);
            while(reader.moreLines()){
                JOptionPane.showMessageDialog(this, reader.line());
            }
            writer.close();
            reader.close();
            connection.closeConnection();
            transferButton.setEnabled(true);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void readConfig() {
        try {
            clientConfig.readConfig();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            System.exit(0);
        }
    }
    
    private String getAccountDestinate(){
        String accountDestinate = this.accountField.getText();
        if(accountDestinate == null){
            throw new NullPointerException("Account destinate empty");
        }
        return accountDestinate;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountField;
    private javax.swing.JTextField amountField;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JPanel conteinerPanel;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JButton transferButton;
    // End of variables declaration//GEN-END:variables
}
